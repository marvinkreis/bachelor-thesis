Intro
    "So this presentation is going to be about automated testing of Scratch programs,
    so the first thing we are going to be looking at is 'What is Scratch?'"

Motivation
    WHAT IS SCRATCH?
        Block-based interactive programming language developed by the MIT Media Lab
        Can be used to easily put together simple game-like programs
        -> Open Scratch GUI and execute a program
        -> Show and explain sprites, attributes
        -> Show and explain scripts

    WHY SCRATCH?
        Used in workshops, online courses, introductory CS lectures
        -> Easily understandable, intuitive
        -> Good for programming beginners
        Popularity
        -> show user statistics (online projects)
        => "To summarize: Scratch is hugely successful engaging novices in programming"

    WHY AUTOMATED TESTING?
        Some Scratch courses are attended by a high number of students
        Automated testing can help teachers to assess student solutions faster
        -> e.g. at Uni Passau: Programming 2 Lecture: Praktomat
        Automated testing can help students to automatically give feedback (for workshops or online courses)
        Previous Work: Usage examples for Hairball and ITCH

Whisker
    Scratch programs are executed inside a GUI
    HOW TO AUTOMATICALLY ACCESS SCRATCH PROGRAMS?
        Approach: Level of system tests, Automating Scratch's IO
        -> Simulate user input through normal IO mechanisms (mouse, keyboard for standard programs (mention extensions))
        -> Observe the Scratch program by accessing information about sprites and variables (which the user would normally see on screen)
        -> (no sound and extensions as of yet)
        Show GUI and simple example of IO (input and print some sprite attribute)
        Whisker is available through its own GUI but can be used with any instance of the Scratch VM
        -> could be integrated into original Scratch GUI

    HOW CAN WE USE THIS FOR TESTING?
        Two ways to check properties of Scratch programs
        -> Run the program and perform checks in between runs when the program is paused
        -> Show and run example
        Since Scratch programs change states frequently according to user input, another approach may be more suitable
        -> Property-based testing (pioneered by QuickCheck, a testing tool for Haskell)
        -> Define properties (constraints) that the program must always hold
        -> Automatically run the program and check if the constraints hold while the program is running

Property-based testing
    HOW CAN WE PERFORM PROPERTY-BASED TESTING ON SCRATCH?
        Scratch programs, like other games, render the user output in frames
        The program is executed in between frames
        -> We can simply check the properties every time a new frame is rendered
        -> Changes can also happen in between steps but we can check what the user sees this way
        Properties are simply defined through assertions
        -> Show and run example with manual input

    HOW CAN WE AUTOMATICALLY CONTROL SCRATCH PROGRAMS?
        Whisker can automatically detect what inputs the program under test can react to (show table)
        Performs these inputs randomly in a given time interval
        We can use this to automatically control Scratch programs for property-based testing
        -> Show and run example

Recap
    Test Scratch programs by automating their IO
    Implement property-based testing by performing assertion every time a new frame is rendered
    Control Scratch programs for property-based testing through simple automated input generation

Evaluation
    HOW EFFECTIVE IS THE AUTOMATED INPUT GENERATION?
        To answer this question, we tested the automated input on various Scratch projects
        I chose projects from the CodeClub Scratch courses for this purpose (show CodeClub website?)
        -> they implement different input methods
        -> they are realistic for Whiskers target usage
        I ran automated input on the projects and measured the coverage each second
        -> Show results

    Most important question
    HOW ACCURATE ARE TEST RESULTS OF THIS APPROACH?
        To measure the accuracy of test results we need an independent ground truth to compare them to
        Therefore I chose to test programs from a 6th / 7th grade Scratch workshop, which were graded manually
        -> Set of 37 student implementations that implement a simple catching game (show game)
        3 Test suites:
            - Normal Test Suite (T1)
            - Constraint Test Suite (T2)
            - Random Input Test Suite (T3)
        -> Show results
        The results show some outliers
        -> some of the projects were excluded from the statistics because the have problems
           that prevent automated testing from producing similar results to manual grading
        -> Most of the excluded programs don't start correctly
            -> key press instead of green flag
            -> go game over immediately the first time they are executed for various reasons
        -> manual grading ignored these problems while the automated tests don't
        -> I believe that students will detect faults like this when given the opportunity to run tests on their programs themselves

Conclusion




INTEGRATE EVALUATION INTO NORMAL PRESENTATION

For discussion: learn list of challenges by hard
